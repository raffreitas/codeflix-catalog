schema {
  query: Query
  mutation: Mutation
}

type Query {
  categories(page: Int! = 1 perPage: Int! = 10 search: String! = "" sort: String! = "" direction: SearchOrder! = ASC): SearchCategoryPayload!
}

type Mutation {
  saveCategory(input: SaveCategoryInput!): CategoryPayload!
  deleteCategory(id: UUID!): Boolean!
}

type CategoryPayload {
  id: UUID!
  name: String!
  description: String
  createdAt: DateTime!
  isActive: Boolean!
}

enum SearchOrder {
  ASC
  DESC
}

type SearchCategoryPayload {
  currentPage: Int!
  perPage: Int!
  total: Int!
  items: [CategoryPayload!]!
}

input SaveCategoryInput {
  id: UUID!
  name: String!
  description: String!
  createdAt: DateTime!
  isActive: Boolean!
}

scalar UUID

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION